# 1.Validate
from functools import reduce

def luhn(code):
    # Предварительно рассчитанные результаты умножения на 2 с вычетом 9 для больших цифр
    # Номер индекса равен числу, над которым проводится операция
    LOOKUP = (0, 2, 4, 6, 8, 1, 3, 5, 7, 9)
    code = reduce(str.__add__, filter(str.isdigit, code))
    evens = sum(int(i) for i in code[-1::-2])
    odds = sum(LOOKUP[int(i)] for i in code[-2::-2])
    return ((evens + odds) % 10 == 0)

print("Прошел проверку: ", luhn('4561 2612 1234 5467'))
print("Не прошел проверку: ", luhn('4561 2612 1234 5464'))

#2. Подсчет количества букв
import collections
s = input('Введите список символов:')
c = dict(collections.Counter(s))
result = ''.join([f'{key.lower()}: {value}' for key, value in c.items()])
newstr = result.replace(": ", "")
print(newstr)


# Задание 3 Простейший калькулятор v0.1
print("""Выберите операцию:
      1.Сложение
      2. Разница
      3. Произведение
      4. Деление""")

a = int(input('Выберите вариант:'))
b = int(input('Введите первое значение:'))
c = int(input('Введите второе значение:'))

def calc(variant, pervoe, vtoroe):
    '''
В этой фунцкия выбирает какое дейтсиве будет выполняться в зависимовсти от ввода 
    '''
    if variant == 1:
        return(pervoe + vtoroe)
    elif variant == 2:
        return(pervoe-vtoroe)
    elif variant == 3:
        return(pervoe*vtoroe)
    elif variant == 4:
        return (pervoe/vtoroe)

print(calc(a, b, c))

#4 Написать функцию с изменяемым числом входных параметров
def function(a, *args, name=None, **kwargs):
    """
    :param a: один позиционный аргумент
    :param args: переменное количество позиционных аргументов
    :param name: один именованный аргумент
    :param kwargs: переменное количество именованных аргументов
    """
    sp = {"mandatory_position_argument": a, "additional_position_arguments": args,
        "mandatory_named_argument": {'name': name}, "additional_named_arguments": kwargs}
    return sp

result = function(1, 2, 3, name='test', surname='test2', some='something')
print(result)


# 5 Работа с областями видимости
My_list = [1, 2, 3]

def change_list(My_list):
    """создает копию листа с возможностью редактировать без редактирования начального листа"""
    my_list_2 = My_list[:]
    my_list_2.append("a")
    return my_list_2


Changed_list = change_list(My_list)
print(My_list)
print(Changed_list)

# 6. Функция проверяющая тип данных
def my_func(x):
    """"" Функция возвращает сколько в списке элементов приведенных данных"""
    a = 0
    b = 0
    c = 0
    d = 0
    for i in x:
        if type(i) == int:
            a += 1
        elif type(i) == str:
            b += 1
        elif type(i) == tuple:
            c += 1
        elif type(i) ==list:
            d += 1
        else:
            print('Такого типа не существует')
    return print({'int':a, 'str':b, 'tuple':c, 'list':d})
list_2 = [1, 2,4, (1,2), 'sss', 's', 'o',[1,2]]
print(my_func(list_2))

# 7 Написать пример чтобы hash от объекта 1 и 2 были одинаковые, а id разные.
a = 5
b = 5.0

print(id(a), id(b))
print(hash(a), hash(b))

# 8. написать функцию, которая проверяет есть ли в списке объект, которые можно вызвать
def ale(x):
    if callable(x) == True:
        print('True')
    else:
        print('False')
ale(int)
