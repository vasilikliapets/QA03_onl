from collections import Counter


# 1.Validate
# –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –ø—Ä–∏–Ω–∏–º–∞—é—â–µ–µ —á–∏—Å–ª–æ - –Ω–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã(—á–∏—Å–ª–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —á–µ—Ç–Ω—ã–º –∏–ª–∏ –Ω–µ —á–µ—Ç–Ω—ã–º).
# –ò –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–π –º–æ–∂–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –∫–∞—Ä—Ç–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å. –ü—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç –≤–≤–æ–¥–∞ –±—É–∫–≤, –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ —Ç.–¥.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
# –ê–ª–≥–æ—Ä–∏—Ç–º –õ—É–Ω–∞
# –ü—Ä–∏–º–µ—Ä—ã
# validate(4561261212345464) #=> False
# validate(4561261212345467) #=> True
# –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
# https://www.paypalobjects.com/en_GB/vhelp/paypalmanager_help/credit_card_numbers.htm
def luhn(card):
    checksum = 0
    cardnumbers = list(map(int, card))
    for count, num in enumerate(cardnumbers):
        if count % 2 == 0:
            buffer = num * 2
            if buffer > 9:
                buffer -= 9
            checksum += buffer
        else:
            checksum += num
    return checksum % 10 == 0


print(luhn('4561261212345464'))
print(luhn('4561261212345467'))

card_number = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: ")
print(luhn(card_number))

# 2. –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—É–∫–≤
# –ù–∞ –≤—Ö–æ–¥ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, "cccbba" —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã - —Å—Ç—Ä–æ–∫–∞ ‚Äúc3b2a"
# –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:
# "cccbba" == "c3b2a"
# "abeehhhhhccced" == "abe2h5c3ed"
# "aaabbceedd" == "a3b2ce2d2"
# "abcde" == "abcde"
# "aaabbdefffff" == "a3b2def5"

print(Counter("abeehhhhhccced"))

# 3. –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä v0.1
while True:
    s = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:\n"
              "1. –°–ª–æ–∂–µ–Ω–∏–µ: +\n"
              "2. –†–∞–∑–Ω–∏—Ü–∞: -\n"
              "3. –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: *\n"
              "4. –î–µ–ª–µ–Ω–∏–µ: /\n"
              "5. –í—ã–π—Ç–∏: exit\n")

    if s == 'exit':
        break
    if s in ('+', '-', '*', '/'):
        x = float(input("x="))
        y = float(input("y="))
        if s == '+':
            print("%.2f" % (x + y))
        elif s == '-':
            print("%.2f" % (x - y))
        elif s == '*':
            print("%.2f" % (x * y))
        elif s == '/':
            if y != 0:
                print("%.2f" % (x / y))
            else:
                print("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å")
    else:
        print("–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É")


# 4. –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å –∏–∑–º–µ–Ω—è–µ–º—ã–º —á–∏—Å–ª–æ–º –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
# –ü—Ä–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å –æ–¥–∏–Ω –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∏ –æ–¥–∏–Ω –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–≤–µ–Ω None
# (–≤ –ø—Ä–∏–º–µ—Ä–µ —ç—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç —Å –∏–º–µ–Ω–µ–º name).
# –¢–∞–∫–∂–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ
# result = function(1, 2, 3, name=‚Äôtest‚Äô, surname=‚Äôtest2‚Äô, some=‚Äôsomething‚Äô)
# Print(result)
# ü°™ {‚Äúmandatory_position_argument‚Äù: 1, ‚Äúadditional_position_arguments‚Äù: (2, 3),
# ‚Äúmandatory_named_argument‚Äù: {‚Äúname‚Äù: ‚Äútest2‚Äù}, ‚Äúadditional_named_arguments‚Äù:{‚Äúsurname‚Äù: ‚Äútest2‚Äù, ‚Äúsome‚Äù: ‚Äúsomething‚Äù}}

def func(a, *args, name=None, **kwargs):
    dict_1 = {"mandatory_position_argument": a}
    if args != ():
        dict_1["additional_position_arguments"] = args
    dict_1["mandatory_named_argument"] = {'name': name}
    if kwargs != ():
        dict_1["additional_named_arguments"] = kwargs
    return dict_1


result = func(1, 2, 3, name='test', surname='test2', some='something')
print(result)

# 5. –†–∞–±–æ—Ç–∞ —Å –æ–±–ª–∞—Å—Ç—è–º–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
# –ù–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑ 3-—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
# –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã.
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
# –ü—Ä–∏ —ç—Ç–æ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å—Å—è. –ü—Ä–∏–º–µ—Ä c —Ñ—É–Ω–∫—Ü–∏–µ–π –∫–æ—Ç–æ—Ä–∞—è –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª ‚Äúa‚Äù:
# My_list = [1, 2, 3]
# Changed_list = change_list(My_list)
# Print(My_list)
# ü°™ [1, 2, 3]
# Print(Changed_list)
# ü°™ [1, 2, 3, ‚Äúa‚Äù]

my_list = [1, 2, 3]


def change_list(my_list):
    list_change = my_list[:]
    list_change.append("a")
    return list_change


changed_list = change_list(my_list)
print(my_list)
print(changed_list)

# 6. –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—â–∞—è —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
# –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ —Ñ—Ö–æ–¥ —Å–ø–∏—Å–æ–∫ –∏–∑ —á–∏—Å–µ–ª, —Å—Ç—Ä–æ–∫ –∏ —Ç–∞–ø–ª–æ–≤
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —Å–∫–æ–ª—å–∫–æ –≤ —Å–ø–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# print(my_function([1, 2, ‚Äúa‚Äù, (1, 2), ‚Äúb‚Äù])
# ü°™ {‚Äúint‚Äù: 2, ‚Äústr‚Äù: 2, ‚Äútuple‚Äù: 1}

# 7. –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–º–µ—Ä —á—Ç–æ–±—ã hash –æ—Ç –æ–±—ä–µ–∫—Ç–∞ 1 –∏ 2 –±—ã–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –∞ id —Ä–∞–∑–Ω—ã–µ.

a = 350.0
b = 350
print("Hash:", hash(a), hash(b))
print("Id:", id(a), id(b))

# 8. –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –≤ —Å–ø–∏—Å–∫–µ –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å

list_1 = [1, 2, True, int]


def call(list_1):
    for i in list_1:
        if callable(i):
            return True
    return False


print(call(list_1))